datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- Enums ---
enum TravelStyle {
  LUXURY
  ADVENTURE
  RELAXATION
  CULTURAL
  BUDGET
}

enum ActivityLevel {
  LOW
  MEDIUM
  HIGH
}

enum UserRole {
  USER
  ADMIN
}

enum TripStatus {
  PLANNING
  CONFIRMED
  COMPLETED
}

enum RewardType {
  DISCOUNT
  FREE_UPGRADE
  EXCLUSIVE_OFFER
}

// --- Add this new Enum ---
enum VerificationStatus {
  NOT_SUBMITTED
  PENDING
  VERIFIED
  REJECTED
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum TripRole {
  OWNER
  MEMBER
}

enum MembershipStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum MediaType {
  IMAGE
  VIDEO
}


// --- Models ---
model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  password         String
  image            String?
  coverImage       String?
  bio              String?
  dob              DateTime?
  nationality      String?
  address          String?
  identityVerified Boolean   @default(false)
  verificationStatus VerificationStatus @default(NOT_SUBMITTED)
  documentUrl      String?
  role             UserRole  @default(USER)

  // Profile Quiz Data
  interests       String[]      @default([])
  travelStyle     TravelStyle?
  activityLevel   ActivityLevel?
  profileComplete Boolean       @default(false)
  
  // Gamification
  points          Int           @default(0)
  unlockedRewards Reward[]
  achievements    Achievement[] // Relation to earned achievements

  // --- NEW: Privacy Settings ---
  isProfilePublic Boolean @default(true)

  // --- NEW: Friends System ---
  friends    User[] @relation("Friends")
  friendsOf  User[] @relation("Friends")

  // --- ADD THESE TWO LINES TO FIX THE ERROR ---
  sentFriendRequests     FriendRequest[] @relation("SentRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedRequests")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  tripMemberships TripMembership[]
  posts    Post[]
  likes    Like[]
  comments Comment[]
}

model Trip {
  id              String           @id @default(cuid())
  name            String           @default("Untitled Trip")
  destination     String           @default("Unknown Destination")
  travelStartDate DateTime
  travelEndDate   DateTime
  budget          Float?
  souvenirType    String?
  status          TripStatus       @default(PLANNING)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  suggestions     Suggestion[]
  members         TripMembership[]
}

model TripMembership {
  id        String   @id @default(cuid())
  tripId    String
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      TripRole @default(MEMBER)
  status    MembershipStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tripId, userId])
}

model Suggestion {
  id        String @id @default(cuid())
  title     String
  summary   String @db.Text
  itinerary Json
  trip      Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId    String
}

model Reward {
  id             String     @id @default(cuid())
  name           String
  description    String
  pointsRequired Int
  type           RewardType
  partnerName    String?
  unlockedBy     User[]
}

model Post {
  id        String    @id @default(cuid())
  content   String
  
  // --- MODIFIER CES LIGNES ---
  mediaUrl  String?   // Renommé de imageUrl à mediaUrl
  mediaType MediaType? // Ajout du type de média
  // -------------------------

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes     Like[]
  comments  Comment[]
}

model Like {
  id     String @id @default(cuid())
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

// --- NEW: Achievement Model for Badges ---
model Achievement {
  id          String @id @default(cuid())
  name        String @unique
  description String
  iconUrl     String // URL to the badge icon
  users       User[] // Relation to users who have earned it
}

model FriendRequest {
  id        String              @id @default(cuid())
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  
  fromUser   User   @relation("SentRequests", fields: [fromUserId], references: [id])
  fromUserId String

  toUser     User   @relation("ReceivedRequests", fields: [toUserId], references: [id])
  toUserId   String

  @@unique([fromUserId, toUserId]) // A user can only send one request to another
}